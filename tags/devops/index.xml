<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on VGALTES blog</title>
    <link>http://example.org/tags/devops/</link>
    <description>Recent content in Devops on VGALTES blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Deploying Azure Functions using Terraform</title>
      <link>http://example.org/post/deploying-azure-functions-using-terraform/</link>
      <pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/deploying-azure-functions-using-terraform/</guid>
      <description>In previous articles (I, II) we&amp;rsquo;ve seen how to deploy an Azure Function App using the Azure CLI and the Azure Functions Core Tools. In this article we&amp;rsquo;ll see how to deploy it using Terraform.
Prerequisites In order to follow this article you will need the .Net SDK 2.1, the Azure CLI and Terraform installed in your laptop/container/VM/whatever.
Building the package What Terraform is going to do is take advantage of the Zip deployment capability (More on this in a future article).</description>
    </item>
    
    <item>
      <title>Deploying Azure Functions using CircleCI</title>
      <link>http://example.org/post/deploying-azure-functions-using-cirecleci/</link>
      <pubDate>Thu, 15 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/deploying-azure-functions-using-cirecleci/</guid>
      <description>In the last article we saw how to deploy an azure function from the CLI. In this article we&amp;rsquo;ll see how we can use the same script to deploy the function from a continuous integration environment. In this case we&amp;rsquo;ll use CircleCI.
Creating a new docker image As we saw, if we want to deploy the Function App using the same script we&amp;rsquo;d need to use the Azure CLI and the Azure Functions Core Tools.</description>
    </item>
    
    <item>
      <title>Deploying Azure Functions, an introduction</title>
      <link>http://example.org/post/deploying-azure-functions-an-introduction/</link>
      <pubDate>Mon, 12 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/deploying-azure-functions-an-introduction/</guid>
      <description>In the last few days, I&amp;rsquo;ve been tinkering with Azure Functions, reading the documentation a bit and doing a Pluralsight course. As it happens quite offten, these introductory courses use easy techniques to deploy the code, focusing on showing what you can do with the platform. Although obviously this has some value, I don&amp;rsquo;t think it&amp;rsquo;s a good idea because, at the end, it will be something that you won&amp;rsquo;t be able to use in a serious test.</description>
    </item>
    
    <item>
      <title>Using different configuration per stage</title>
      <link>http://example.org/post/using-different-configuration-per-stage/</link>
      <pubDate>Wed, 16 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/using-different-configuration-per-stage/</guid>
      <description>In the previous article we saw how to create a basic deployment pipeline for a serverless application. In this article, we&amp;rsquo;re going to enrich the deployment by allowing to have different values for configuration settings in each stage.
Background The moment your application starts to be a little bit more complex, you need to use configuration settings. These settings can be things like the log level, addresses of external services, usernames and (encrypted) passwords, etc.</description>
    </item>
    
    <item>
      <title>Deploying a serverless application</title>
      <link>http://example.org/post/deploy-serverless-app/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/deploy-serverless-app/</guid>
      <description>Starting with AWS Lambda is really easy. You can even write a function in the browser! But that&amp;rsquo;s not how you should work on a daily basis. You must have a CI/CD pipeline set up, you probably have two accounts (one for production and another one for development), you need a repeatable and reliable way to create your infrastructure and so on. In this article I&amp;rsquo;ll show you how to create a simple continuous delivery pipeline that brings us closer to a professional application development.</description>
    </item>
    
  </channel>
</rss>