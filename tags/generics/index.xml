<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generics on VGALTES blog</title>
    <link>https://vgaltes.com/tags/generics/</link>
    <description>Recent content in generics on VGALTES blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vgaltes.com/tags/generics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Kotlin: covariance and contravariance</title>
      <link>https://vgaltes.com/post/kotlin-variance-covariance/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/kotlin-variance-covariance/</guid>
      <description>When we work with generics, sometimes we need to help the compiler in order to accomplish what we want. By doing that, we&amp;rsquo;ll be telling the compiler if two classes are covariant or contravariant. Let&amp;rsquo;s see a couple of examples to help understand these concepts.
Covariance Imagine that we want to model a factory of toys. Let&amp;rsquo;s start by creating an interface that will take a generic type:
1 2 3 interface Factory&amp;lt;T&amp;gt; { fun create(name: String): T } Now we need to define what we want to produce</description>
    </item>
    
  </channel>
</rss>
