<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kotlin on VGALTES blog</title>
    <link>http://example.org/categories/kotlin/</link>
    <description>Recent content in kotlin on VGALTES blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/categories/kotlin/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Kotlin: variance and covariance</title>
      <link>http://example.org/post/kotlin-variance-covariance/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/kotlin-variance-covariance/</guid>
      <description>When we work with generics, sometimes we need to help the compiler in order to accomplish what we want. By doing that, we&amp;rsquo;ll be telling the compiler if two classes are covariant or contravariant. Let&amp;rsquo;s see a couple of examples to help understand these concepts.
Covariance Imagine that we want to model a factory of toys. Let&amp;rsquo;s start by creating an interface that will take a generic type:
interface Factory&amp;lt;T&amp;gt; { fun create(name: String): T } Now we need to define what we want to produce</description>
    </item>
    
    <item>
      <title>Learning Kotlin: sealed classes and enums</title>
      <link>http://example.org/post/kotlin-enums-sealed-classes/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/kotlin-enums-sealed-classes/</guid>
      <description>In Kotlin we have two constructs that alow us to create a closed typed hierarchy: sealed classes and enums. Let&amp;rsquo;s take a look to them and see the differences amongst them.
Sealed classes A sealed class is a class that we know all its subclasses at compile time. We can&amp;rsquo;t declare a subclass of a sealed class outside the module where it&amp;rsquo;s defined.
One of the differences between a sealed class and an enum is that a subclass of a sealed class can have multiple instances, each with its own state.</description>
    </item>
    
    <item>
      <title>Learning Kotlin: abstract classes and interfaces</title>
      <link>http://example.org/post/kotlin-abstract-classes-interfaces/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/kotlin-abstract-classes-interfaces/</guid>
      <description>When you&amp;rsquo;re studying Kotlin and take a look at abstract classes and interfaces, your first impression is that they are two very similar constructs, or at least that was my first impression. You can use both of them to share state and behavior.
So, let&amp;rsquo;s see what are they and what are the difference amongst them.
Abstract classes With abstract classes, using the keyword abstract you can declare members without implementation.</description>
    </item>
    
    <item>
      <title>Learning Kotlin: configuring Kotest with Gradle</title>
      <link>http://example.org/post/learning-kotlin-gradle-kotest/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/post/learning-kotlin-gradle-kotest/</guid>
      <description>I&amp;rsquo;m about to start a new job. This will be a huge challenge for me, as I&amp;rsquo;m going to be developing in Kotlin. I&amp;rsquo;ve spent all of my professional life working with .Net, so I need to learn LOTS of things. As I believe that writing down what you learn is the best way to solidify it, I&amp;rsquo;ll be documenting all that I learn (maybe not all, but a bing chunk of it :D).</description>
    </item>
    
  </channel>
</rss>
