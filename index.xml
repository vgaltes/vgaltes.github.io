<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VGALTES blog</title>
    <link>https://vgaltes.com/</link>
    <description>Recent content on VGALTES blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 12 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://vgaltes.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Kotlin: covariance and contravariance</title>
      <link>https://vgaltes.com/post/kotlin-variance-covariance/</link>
      <pubDate>Sat, 12 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/kotlin-variance-covariance/</guid>
      <description>When we work with generics, sometimes we need to help the compiler in order to accomplish what we want. By doing that, we&amp;rsquo;ll be telling the compiler if two classes are covariant or contravariant. Let&amp;rsquo;s see a couple of examples to help understand these concepts.
Covariance Imagine that we want to model a factory of toys. Let&amp;rsquo;s start by creating an interface that will take a generic type:
1 2 3 interface Factory&amp;lt;T&amp;gt; { fun create(name: String): T } Now we need to define what we want to produce</description>
    </item>
    
    <item>
      <title>Learning Kotlin: sealed classes and enums</title>
      <link>https://vgaltes.com/post/kotlin-enums-sealed-classes/</link>
      <pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/kotlin-enums-sealed-classes/</guid>
      <description>In Kotlin we have two constructs that alow us to create a closed typed hierarchy: sealed classes and enums. Let&amp;rsquo;s take a look to them and see the differences amongst them.
Sealed classes A sealed class is a class that we know all its subclasses at compile time. We can&amp;rsquo;t declare a subclass of a sealed class outside the module where it&amp;rsquo;s defined.
One of the differences between a sealed class and an enum is that a subclass of a sealed class can have multiple instances, each with its own state.</description>
    </item>
    
    <item>
      <title>Learning Kotlin: abstract classes and interfaces</title>
      <link>https://vgaltes.com/post/kotlin-abstract-classes-interfaces/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/kotlin-abstract-classes-interfaces/</guid>
      <description>When you&amp;rsquo;re studying Kotlin and take a look at abstract classes and interfaces, your first impression is that they are two very similar constructs, or at least that was my first impression. You can use both of them to share state and behavior.
So, let&amp;rsquo;s see what are they and what are the difference amongst them.
Abstract classes With abstract classes, using the keyword abstract you can declare members without implementation.</description>
    </item>
    
    <item>
      <title>Learning Kotlin: configuring Kotest with Gradle</title>
      <link>https://vgaltes.com/post/learning-kotlin-gradle-kotest/</link>
      <pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/learning-kotlin-gradle-kotest/</guid>
      <description>I&amp;rsquo;m about to start a new job. This will be a huge challenge for me, as I&amp;rsquo;m going to be developing in Kotlin. I&amp;rsquo;ve spent all of my professional life working with .Net, so I need to learn LOTS of things. As I believe that writing down what you learn is the best way to solidify it, I&amp;rsquo;ll be documenting all that I learn (maybe not all, but a bing chunk of it :D).</description>
    </item>
    
    <item>
      <title>Retrospectiva 2020</title>
      <link>https://vgaltes.com/post/retrospectiva-2020/</link>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/retrospectiva-2020/</guid>
      <description>No se donde va a llegar este artículo, pero empecemos rememorando lo que ha sido este 2020.
El 2020 empezó como había acabado el 2019, es decir, trabajando como Technical Coach en Voxel. Esto quería decir trabajar 4 días a la semana, de 9 a 17, haciendo algo que me gusta como ayudar a un equipo a crecer, y trabajando desde casa. Respecto a mi último trabajo había perdido algo de poder adquisitivo (mismo rate pero en euros en lugar de libras y 4 días a la semana en lugar de cinco), pero había ganado mucha calidad de vida.</description>
    </item>
    
    <item>
      <title>Lambda in .NET Core and SNS</title>
      <link>https://vgaltes.com/post/lamda-dotnet/</link>
      <pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/lamda-dotnet/</guid>
      <description>This week I wanted to investigate how to use a Pub/Sub mechanism in an on-premise environment without needing to install anything else in our infrastructure, so using a managed service. I also wanted to make my first tests with CDK. Let me show you what I did.
Goal What I want to accomplish is that a system that lives in our infrastructure communicates asynchronously with another system on it. It&amp;rsquo;s easy to simulate the sender of the message with a console application, but for the receiver I&amp;rsquo;ll need a public HTTP endpoint.</description>
    </item>
    
    <item>
      <title>Lambda destinations</title>
      <link>https://vgaltes.com/post/lambda-destinations/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/lambda-destinations/</guid>
      <description>AWS recently introduced lambda destinations for asynchronous invocations. So, if you have, let&amp;rsquo;s say, a lambda function attached to an SNS event, you can configure a destination when the execution is successful and a destination when the execution fails. The destination can be either an SQS queue, an SNS topic, EventBridge or another Lambda function.
As usual, the serverless framework implemented this feature quickly. Let&amp;rsquo;s take a look how to do it and what&amp;rsquo;s the difference with a DLQ.</description>
    </item>
    
    <item>
      <title>Using MediatR as a refactoring strategy</title>
      <link>https://vgaltes.com/post/using-mediatr-as-a-refactoring-strategy/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/using-mediatr-as-a-refactoring-strategy/</guid>
      <description>Let me introduce you to Rachel, the new developer of the team. Rachel is an excellent developer eager to make a huge impact on the team and the organisation. When Rachel lands in the team, they treat them very well. They show her all the facilities, they teach her on how to make a good coffee with the new and shiny coffee machine and they even deploy to production in her first day.</description>
    </item>
    
    <item>
      <title>Capturing and forwarding correlation IDs in ASP.NET Core, the easy way</title>
      <link>https://vgaltes.com/post/forwarding-correlation-ids-in-aspnetcore-version-2/</link>
      <pubDate>Wed, 29 Jan 2020 21:03:26 +0100</pubDate>
      
      <guid>https://vgaltes.com/post/forwarding-correlation-ids-in-aspnetcore-version-2/</guid>
      <description>The minute after I published my last article about Capturing and forwarding correlation IDs, my very good friend Hugo Biarge send me a Direct Message telling me: &amp;ldquo;Hey man! Have you read this article? This is new from ASP .NET Core 3, and it&amp;rsquo;s an easier solution than the one you explain in the article.&amp;rdquo; So, I took a look, not only at the article but also at the traces that I was already generating, and voilà, everything was already there.</description>
    </item>
    
    <item>
      <title>Capturing and forwarding correlation IDs in ASP.NET Core</title>
      <link>https://vgaltes.com/post/forwarding-correlation-ids-in-aspnetcore/</link>
      <pubDate>Tue, 28 Jan 2020 15:03:26 +0100</pubDate>
      
      <guid>https://vgaltes.com/post/forwarding-correlation-ids-in-aspnetcore/</guid>
      <description>When you have different services that communicate amongst them, you need to be able to correlate those calls to perform effective analysis of any problem you might have. The way to do this is using correlation ids and pass them along in all your call to the different services you use. In this article, I´m going to explain you a way to do this in ASP.NET Core.
Correlation IDs Why do you need more than one correlation ID?</description>
    </item>
    
    <item>
      <title>Serverless Patterns implemented: using an SQS queue as a DLQ for a SNS topic</title>
      <link>https://vgaltes.com/post/serverless-patterns-implemented-sls-dlq/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/serverless-patterns-implemented-sls-dlq/</guid>
      <description>In the last two articles (here and here) we implemented some of the Serverless Patterns described in this article from Jeremy Daly. In this article, we&amp;rsquo;re going to concentrate in just one pattern, the Notifier. We&amp;rsquo;re going to do this, because of the [recent announcement] from AWS that you can now use an SQS queue as a Dead Letter Queue for an SNS topic.
If you read the article, you will see that this DLQ is complementary to the DLQ you might define in a function that is triggered by an SNS topic, as Otavio Ferreira explains here.</description>
    </item>
    
    <item>
      <title>Serverless Patterns implemented, part 2</title>
      <link>https://vgaltes.com/post/serverless-patterns-implemented-part2/</link>
      <pubDate>Thu, 14 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/serverless-patterns-implemented-part2/</guid>
      <description>In this article I will continue with the implementation of some Serverless Patterns described in this article from Jeremy Daly about [Serverless Patterns]. Check the first post here Let&amp;rsquo;s start!
Common setup All the projects will have a common setup, which is fairly simple. First, initialize a NodeJS project:
1 yarn init Then install the serverless framework as a dev dependency
1 yarn add serverless --dev And finally create a script to deploy the project</description>
    </item>
    
    <item>
      <title>Serverless Patterns implemented, part 1</title>
      <link>https://vgaltes.com/post/serverless-patterns-implemented-part1/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/serverless-patterns-implemented-part1/</guid>
      <description>I think that the best way to learn something is to practice it and to try to explain it, so this is what I&amp;rsquo;m going to do in the next series of posts. These posts will be based on the amazing article from Jeremy Daly about Serverless Patterns. I&amp;rsquo;m not going to copy Jeremy&amp;rsquo;s words here, so for each pattern, go to the article and read it. I&amp;rsquo;ll provide a technical implementation here and I will mention more resources I found interesting.</description>
    </item>
    
    <item>
      <title>Set up a multi-region active-active backend</title>
      <link>https://vgaltes.com/post/multi-region-backend/</link>
      <pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/multi-region-backend/</guid>
      <description>Congratulations! Your startup is starting to bring attention to many people and you&amp;rsquo;re starting to have clients from different countries and continents. But your lambdas and API gateway are still in your initial region, and that might add some latency to some users. Apart from that, you want to increase the reliability of your system. So, you decide to go multi-region. Can you do that easily? In this article, we&amp;rsquo;ll see how to do that.</description>
    </item>
    
    <item>
      <title>Set up a custom domain for your API Gateway</title>
      <link>https://vgaltes.com/post/api-gateway-custom-domain/</link>
      <pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/api-gateway-custom-domain/</guid>
      <description>If you&amp;rsquo;re doing something more than a few tests with Lambda and API Gateway, there will be a time where you will like to stop using the AWS-created endpoints for your APIs and start using your own domain. You know, instead of telling your clients, &amp;ldquo;please, go to https://lk7z14x78h.execute-api.eu-west-1.amazonaws.com/dev/helloWorld&amp;quot;, you will like to point them to something like &amp;ldquo;api.authenticatedservices.net/helloWorld&amp;rdquo;. In this article, we&amp;rsquo;ll see how to do that.
Disclaimer This article is a summary of two articles (this one and this one) from Alex DeBrie (who you should follow if you&amp;rsquo;re interested in serverless).</description>
    </item>
    
    <item>
      <title>Cognito User Pools, Google federation and AWS Amplify</title>
      <link>https://vgaltes.com/post/cognito-user-pools-google/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/cognito-user-pools-google/</guid>
      <description>In the previous article, we saw how to secure an API Gateway endpoint using Cognito user pools. We used the built-in capabilities of the user pools to create the users, sign them up, etc. But many applications nowadays don&amp;rsquo;t create users on their own; they use [social login] and rely on third-party social services such as Facebook or Google to manage users for them.
In this article, we&amp;rsquo;ll see how we can adapt our previous code to allow users to sign-up and sign-in to our service using their Google account.</description>
    </item>
    
    <item>
      <title>Basic API Gateway endpoint authentication with Cognito User Pools</title>
      <link>https://vgaltes.com/post/api-gw-basic-auth/</link>
      <pubDate>Fri, 18 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/api-gw-basic-auth/</guid>
      <description>In many occasions, you don&amp;rsquo;t want your whole API open to the public. Maybe you want to make some endpoints available to authenticated users. In this article we&amp;rsquo;re going to see how to do that using Amazon Cognito User Pools and AWS Amplify. Let&amp;rsquo;s start!
Amazon Cognito User Pools As the documentation says, a user pool is a user directory in Amazon Cognito. You can allow your users to sign-up, sign-in, etc.</description>
    </item>
    
    <item>
      <title>Interesting reads - June 2019</title>
      <link>https://vgaltes.com/post/random-stuff-june/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/random-stuff-june/</guid>
      <description>My good friend Edu Ferro has a very nice blog called eferro&amp;rsquo;s random stuff in which he posts the most interesting blogs, talks and podcasts he&amp;rsquo;s read, viewed and heard lately. I like the idea and, now that I have a bit more free time, I&amp;rsquo;ll try to do the same, at least once every month. I&amp;rsquo;m not going to post here podcasts and talks, basically because all the ones I listen I get them from Edu&amp;rsquo;s blog, so I&amp;rsquo;m just going to concentrate in blogs.</description>
    </item>
    
    <item>
      <title>Mentoring</title>
      <link>https://vgaltes.com/post/mentoring/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/mentoring/</guid>
      <description>Last September I turned 40. You know, in the movies, when someone turns forty he buys a new brand card, gets divorced and tries something new. I still don&amp;rsquo;t have a car and, although I&amp;rsquo;m not married, I still live with my partner, but I did start something new. In my case, was an old &amp;ldquo;aspiration&amp;rdquo; (I tried it 7 years ago): learning to play guitar. Not that I want to be the next Angus Young but I never had any musical education and I always wanted to be able to play an instrument, especially guitar.</description>
    </item>
    
    <item>
      <title>Using Key Vault secrets in AppSettings</title>
      <link>https://vgaltes.com/post/using-key-vault-secret-in-appsettings/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://vgaltes.com/post/using-key-vault-secret-in-appsettings/</guid>
      <description>In the last article we talked about securing Azure Functions and we saw how to insert a message into an Event Hub. To insert the message, we needed the connection string to be in an application setting. This is not the most secure way to store a connection string. We talked that it would be a much better option to store it in Key Vault. Until a couple of days ago, to do that we needed to use a library to get the secret from Key Vault and then use an imperative binding to be able to insert the message into the Event Hub.</description>
    </item>
    
  </channel>
</rss>
